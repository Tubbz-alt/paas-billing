// Code generated by go-bindata.
// sources:
// sql/001_create_to_seconds_function.sql
// sql/002_create_iso8601_function.sql
// sql/010_create_app_usage_events.sql
// sql/020_create_service_usage_events.sql
// sql/025_create_pricing_plans.sql
// sql/026_create_pricing_functions.sql
// sql/027_create_validate_formula_trigger.sql
// sql/030_create_billable.sql
// sql/040_create_billable_range_function.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sql001_create_to_seconds_functionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcd\x3d\x4b\x43\x31\x14\xc6\xf1\xd9\x7c\x8a\x67\xc8\x90\x0c\x77\x70\x6d\xa7\x18\x62\xb9\x90\xa6\x9a\x97\x59\xae\xf1\xd4\x0a\xed\xcd\x25\x49\x51\xfc\xf4\x22\xb5\xd2\xed\xc0\x79\xf8\xfd\xd9\x30\xa0\x97\x97\x46\xb9\xcc\x6f\x0d\xf4\xd5\xeb\x94\x7b\x43\x3f\x10\xe6\xf3\xe9\x95\x2a\xca\x1e\xd7\xf7\xbe\x96\x13\x26\xf4\xd6\xbf\xeb\x34\xbf\x13\xd3\xde\xa8\x68\xb0\xf3\xf0\xe6\xc9\x2a\x6d\xf0\x98\x9c\x8e\xe3\xce\xdd\xa8\xe2\x7f\x2f\xe1\x4d\x4c\xde\x85\x5f\x9b\xea\x47\x86\x0a\xe0\x9c\xdd\x35\x3a\x52\xee\xd7\xbc\xa0\xa5\xe4\xc3\xa5\x26\xce\xcb\x42\x55\xf0\x7b\x89\x01\xc7\xf2\x79\xb9\xa5\x5c\xad\xfe\x88\x35\xe3\x1c\x56\xb9\x4d\x52\x1b\x83\xf0\x6c\x31\x6e\xb7\x29\xaa\x07\x6b\x10\xa2\x1f\x75\x5c\xb3\x9f\x00\x00\x00\xff\xff\xec\xd8\x3f\xd6\xe6\x00\x00\x00")

func sql001_create_to_seconds_functionSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql001_create_to_seconds_functionSql,
		"sql/001_create_to_seconds_function.sql",
	)
}

func sql001_create_to_seconds_functionSql() (*asset, error) {
	bytes, err := sql001_create_to_seconds_functionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/001_create_to_seconds_function.sql", size: 230, mode: os.FileMode(420), modTime: time.Unix(1511910968, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql002_create_iso8601_functionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcc\x41\x4b\xc3\x30\x18\x87\xf1\xb3\xfd\x14\x7f\xca\xa0\x1b\x58\x50\x11\x91\xf5\x14\xd3\xd8\x15\xd6\x54\xd2\xe4\x50\x2f\x12\x66\x36\x0b\x5b\x52\x93\x77\x20\xfb\xf4\x32\x76\x7f\x9e\x5f\x59\x62\x7f\xf6\x3b\x9a\x82\xc7\x3e\x44\x44\x37\x47\x97\x9c\xa7\xc9\x1f\xf0\x6d\xc9\x25\xd8\x84\x76\xe8\xf1\xfa\xf2\xf0\x08\xa3\x79\xc6\x95\x60\x5a\xa0\x57\x50\xe2\x63\xcb\xb8\xc0\xbb\x91\x5c\xb7\xbd\xc4\x94\xc2\x35\x5b\x12\x68\x3a\xb9\x44\xf6\x34\xd3\x65\x85\xe8\xe8\x1c\x7d\x02\xb9\x3f\x02\x1b\xb0\x58\xe0\x4d\x34\xad\xcc\xee\x94\xd0\x46\x49\x50\xf8\xda\xfd\xd8\xb8\x24\xd8\xdb\x8a\x4b\xf0\x0e\x85\xd1\xbc\xb8\x47\x31\x8e\xe3\x58\x76\x5d\x59\xd7\xb9\xce\x37\x9b\xa7\xe7\x75\xd7\xae\x87\x21\xff\xcc\x8b\x55\x95\x09\x59\x57\x57\x72\xcb\x64\x63\x58\x23\x30\x1f\xe7\x43\xfa\x3d\x56\xd9\x7f\x00\x00\x00\xff\xff\xf6\x3f\xf6\x71\xdd\x00\x00\x00")

func sql002_create_iso8601_functionSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql002_create_iso8601_functionSql,
		"sql/002_create_iso8601_function.sql",
	)
}

func sql002_create_iso8601_functionSql() (*asset, error) {
	bytes, err := sql002_create_iso8601_functionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/002_create_iso8601_function.sql", size: 221, mode: os.FileMode(420), modTime: time.Unix(1511910968, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql010_create_app_usage_eventsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xce\x41\x6b\x83\x30\x18\xc6\xf1\x73\xf2\x29\xde\x9b\x06\xdc\x69\xb0\x8b\x20\x44\xf7\x8e\x65\x68\xdc\x4c\x04\x6f\x21\x2c\x41\x72\xd8\x10\x13\xb7\x7e\xfc\xd2\x52\x68\x29\x5e\x7a\x7f\xf8\x3f\xbf\x66\x40\xae\x11\x34\xaf\x5b\x04\xf1\x06\xb2\xd7\x80\x93\x50\x5a\x81\x5d\x16\xb3\x45\x3b\x7b\xe3\xff\xfc\x6f\x8a\x90\x53\x12\x1c\x28\x1c\x04\x6f\x0b\x4a\xe6\x2d\x38\x68\xde\xf9\x90\x3f\xbf\x30\x18\xa5\xf8\x1a\xb1\xa0\xe4\x7b\xf5\x36\x79\x67\x6c\x02\x2d\x3a\x54\x9a\x77\x9f\x05\x25\xab\xfd\x37\x3f\x3e\x9e\x7a\xf0\xa1\x7a\x59\x53\x56\xd2\xcb\xbb\x90\xaf\x38\xdd\xbd\x07\x77\x30\x57\x41\x70\xd0\xcb\x1d\x51\x70\x8f\x54\x62\xb2\xc9\xef\x87\x20\xbf\x01\x3e\x55\x55\x76\xde\x66\x0c\x58\x49\x8f\x01\x00\x00\xff\xff\xaa\xf2\x69\x45\x24\x01\x00\x00")

func sql010_create_app_usage_eventsSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql010_create_app_usage_eventsSql,
		"sql/010_create_app_usage_events.sql",
	)
}

func sql010_create_app_usage_eventsSql() (*asset, error) {
	bytes, err := sql010_create_app_usage_eventsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/010_create_app_usage_events.sql", size: 292, mode: os.FileMode(420), modTime: time.Unix(1512414993, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql020_create_service_usage_eventsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8e\xc1\x4a\xc4\x30\x14\x45\xd7\xc9\x57\xbc\xdd\xb4\x50\x57\x82\x1b\x61\x20\x33\x3e\x31\x32\x4d\xb5\x49\xa1\xbb\x10\x9a\x47\xc9\xc2\x22\x4d\x5a\xf5\xef\x45\xdb\x85\x0e\x74\xd1\xfd\xbd\xe7\x9c\x73\x8d\xc2\x20\x18\x71\xba\x20\xc8\x47\x50\x95\x01\x6c\xa5\x36\x1a\x22\x8d\x73\xe8\xc8\x4e\xd1\xf5\x64\x69\xa6\x21\x45\xc8\x38\x0b\x1e\x34\xd6\x52\x5c\x0a\xce\xfa\x29\x78\x38\x3f\x89\x3a\xbb\xbd\xcb\xa1\x51\xf2\xb5\xc1\x82\xb3\x6e\x24\x97\xc8\x5b\x97\xc0\xc8\x12\xb5\x11\xe5\x4b\xc1\xd9\xe8\x3e\xec\x1b\xc5\x1f\x1e\x3c\xeb\x4a\x9d\x78\x7e\xcf\xd7\x02\xa9\x1e\xb0\xbd\x2a\x08\xfe\xd3\xfe\xaf\x08\x1e\x2a\xb5\x51\x16\xfc\x5e\x5a\x4c\x2e\xd1\x36\x10\xb2\x3f\xc1\x37\xc7\xe3\xe1\x77\x7f\xc8\x61\xaf\x27\x7d\xbd\xef\xd2\xac\xb3\x30\xc4\xe4\x86\x6e\xf9\x2f\xda\xef\x00\x00\x00\xff\xff\xc6\x29\xc3\x37\xaf\x01\x00\x00")

func sql020_create_service_usage_eventsSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql020_create_service_usage_eventsSql,
		"sql/020_create_service_usage_events.sql",
	)
}

func sql020_create_service_usage_eventsSql() (*asset, error) {
	bytes, err := sql020_create_service_usage_eventsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/020_create_service_usage_events.sql", size: 431, mode: os.FileMode(420), modTime: time.Unix(1512478419, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql025_create_pricing_plansSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x51\x6b\xb3\x30\x18\x85\xaf\xcd\xaf\x38\x97\x0a\x0a\xdf\x7d\xe1\x83\xae\xcb\x98\xd4\xd9\xcd\x2a\xb4\x57\x21\x68\xea\x02\x49\x94\x18\x47\xb7\x5f\x3f\x74\x76\xae\xdd\xc6\x9a\xab\x10\xde\xf7\x21\xe7\x3c\x51\x84\xd6\xca\x52\x9a\x1a\xad\xe2\xa6\x43\xd9\x18\xc7\xa5\xc1\xa1\xb1\xba\x57\xbc\x1b\x2e\x28\xb9\x2a\x7b\xc5\xdd\x38\x66\x65\x29\x3a\xb2\xca\xe8\x32\xa7\xc8\x97\x37\x09\x45\x7c\x87\x74\x93\x83\xee\xe2\x6d\xbe\x3d\x01\xd9\x08\xf4\x89\x27\x2b\x74\xc2\x4a\xae\xf0\x98\xc5\x0f\xcb\x6c\x8f\x35\xdd\x87\xc4\x33\x5c\x0b\x38\x71\x74\xe3\x72\x5a\x24\x49\x48\xbc\x17\xae\x64\xc5\x0e\xb6\xd1\x70\x52\x8b\xce\x71\xdd\xba\xb7\xaf\x13\x03\x96\xd5\xbd\xac\xbe\xed\x4e\x7f\xbe\x7c\x27\xde\xea\x9e\xae\xd6\xf0\x95\x30\xb5\x7b\xf6\x9d\x95\xda\xff\xa4\x04\x01\xfe\xe3\x5f\x10\xe2\xb7\x13\x45\x30\x8d\x83\xd0\xad\x7b\xfd\x11\x35\xe4\xf8\x93\x72\x1d\x6a\x4a\x30\xd1\xae\x46\x05\x0b\x72\x12\x52\xa4\xf1\x53\x41\x11\xa7\xb7\x74\x77\xe1\x45\x56\x47\x76\xe6\x86\x7d\x94\xcd\x4d\xc5\xe6\x52\x37\xe9\xb9\x40\xf8\xb3\x92\x10\x73\x6d\x0b\xf2\x1e\x00\x00\xff\xff\xdd\x23\x2b\xd5\x3c\x02\x00\x00")

func sql025_create_pricing_plansSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql025_create_pricing_plansSql,
		"sql/025_create_pricing_plans.sql",
	)
}

func sql025_create_pricing_plansSql() (*asset, error) {
	bytes, err := sql025_create_pricing_plansSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/025_create_pricing_plans.sql", size: 572, mode: os.FileMode(420), modTime: time.Unix(1512418302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql026_create_pricing_functionsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x4f\x6b\xe3\x3c\x10\xc6\xcf\x9a\x4f\x31\x07\x83\x6c\x70\xa0\xef\x7b\x8c\xd9\x83\x9b\x6a\x43\x20\x75\x17\x37\xb9\x2d\x04\x45\x99\xa6\x02\xc9\x72\xf5\xa7\xcd\x2e\xfd\xf0\x8b\x9b\xd8\x84\xee\xb2\xac\x2f\xd6\xcc\xe8\x99\x79\xf4\x9b\xd9\x0c\xe9\x44\x0a\x25\x3e\x39\x6f\x93\x91\xf8\xa6\xe3\x33\xbe\x4a\xaf\xe5\xde\x50\xc0\x90\xf6\x21\xea\x98\x22\x1d\x60\xd1\x8a\x7a\x23\xf0\xa1\xc5\x56\x7c\x5b\xd7\x0b\x81\x5f\xb7\xcd\x62\xb3\x7a\x68\x90\x5e\xa5\xd9\x5d\x5a\xe4\xc0\xec\x1e\xbb\x64\xc9\x6b\x55\x02\x3b\x24\x2f\xa3\x76\x1d\xc6\x10\x7f\x7a\xd9\x1d\xa9\x04\x36\x8e\x8b\x74\x8a\x50\xa0\xa7\x98\x7c\x17\x46\x15\xd6\x8f\x98\x65\x70\x27\x16\xeb\xba\x15\xc0\x5c\x8a\x63\xa9\x82\x5b\xb1\x5c\x35\xc0\x06\xdf\x29\x12\x2a\x67\x7b\x6d\x68\x9a\x7e\xf9\x17\xa8\xbb\xe8\x70\x50\xa6\xa0\xbb\x23\x30\xa6\x9c\x34\x14\x14\xe5\x76\x5f\xe2\x4d\x51\x02\x63\x74\x8a\x5e\xaa\x98\x53\xef\xd4\x33\x3e\x79\x67\x31\x4f\x7d\x4f\x3e\x1f\x5d\x17\x38\x43\xe3\xde\xae\x33\x45\x51\x01\x3b\x3b\x1e\xfa\x57\x20\x9a\xbb\x0a\xb3\x0c\xd7\x75\xb3\xdc\xd6\x4b\x81\xbd\xe9\x8f\xe1\xc5\xe0\xea\xfe\x7e\xbb\xa9\x6f\xd7\xa2\x02\x00\x98\xcd\x46\xb3\x13\xed\x0f\x8f\xe1\xc5\xfc\x8d\xed\xe7\x07\xe2\x35\x3b\x2c\xb0\x15\x9b\x6d\xdb\x3c\x9e\xc3\x3f\x80\x1b\xf2\x13\xb5\x21\x31\xff\x82\x79\x20\x43\x2a\x02\x63\xfc\x7c\xc2\x9c\x03\x63\xec\xfd\x1d\x3d\x1d\xe9\xd4\xef\x3c\xf5\x46\x2a\xca\x3f\x85\x13\xc3\x33\x93\x11\x76\x89\xfc\x86\x7f\x10\x65\x8c\x7f\xcf\x2c\x59\xe7\x7f\xec\x74\xb7\xb3\x7b\x5e\xe2\xf0\xf1\x3c\xfb\x6f\x3e\xbf\x2c\xb1\xe0\x25\xf2\xe3\x95\x20\x6a\x4b\xc3\xf5\x40\xca\x75\x87\x30\x68\x78\x9e\xfd\xff\x9b\xe0\xe2\x91\x17\x53\xa5\xe2\xc0\xfe\x75\x1f\x15\xfc\x0a\x00\x00\xff\xff\x3f\x83\x71\xf1\xf0\x02\x00\x00")

func sql026_create_pricing_functionsSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql026_create_pricing_functionsSql,
		"sql/026_create_pricing_functions.sql",
	)
}

func sql026_create_pricing_functionsSql() (*asset, error) {
	bytes, err := sql026_create_pricing_functionsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/026_create_pricing_functions.sql", size: 752, mode: os.FileMode(420), modTime: time.Unix(1511910968, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql027_create_validate_formula_triggerSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\xd1\x4b\xe3\x4a\x18\xc5\x9f\x3b\x7f\xc5\xb9\xd8\x4b\x12\x6d\xbc\xfa\x78\x1b\xe4\x52\xd3\xa9\x06\x24\x29\xd3\x14\x85\xeb\x6e\x88\xed\x67\x1c\x9c\x4c\xb2\xc9\xc4\xea\xe2\x1f\xbf\xb4\xb6\x52\xab\xc2\xb2\x9b\x7d\x99\x96\x61\xce\xef\x7c\x5f\x1e\xce\x71\x5d\x2c\xee\xa4\x21\x25\x6b\x83\x42\xab\x27\xe6\x0b\x3e\x88\x39\x22\x01\xc1\xc7\x17\x03\x9f\x63\x34\x0d\xfd\x38\x88\x42\x3c\xa4\x4a\xce\x53\x43\xc9\x6d\x51\xe5\x8d\x4a\x6d\x07\x82\xc7\x53\x11\x4e\x60\x2a\x99\x65\x54\x61\x30\x41\xb7\xcb\x86\xdc\xbf\x18\x08\xce\x3a\x52\xaf\x34\x1b\x01\x0c\x3d\x1a\x8f\x75\xa4\x52\x94\xa5\x2a\x31\xc5\x3d\xe9\xcd\xe5\xbc\xc9\xf3\xa7\xa4\xac\xe4\x8c\xa0\x9b\x9c\x2a\x39\xf3\xd8\x29\x3f\x0b\xc2\xf7\x9c\xfe\x09\x54\xb1\xa0\xca\x0e\xf9\xe5\xe1\xfa\xd2\xf1\x3e\x7c\x67\xd7\xa4\x68\x66\x50\x51\x46\x8f\x65\x52\x51\xa9\xd2\x19\xd9\x3b\x2f\x7b\xb0\xfa\x7d\x5b\x6a\x43\x19\x55\xcf\x37\x32\x93\xda\x3c\xaf\xa7\x70\xac\x1e\xac\xbd\xe5\x91\x59\xce\xef\xba\xd8\xff\x1f\xb9\xff\x7e\x39\x70\xfe\xbb\x3e\xdc\xfc\xfd\x13\xf8\x36\x99\xd7\xdd\x9c\xf2\xa2\x7a\x4a\xa4\x4e\xf2\x9b\x76\xc9\x46\xe6\xb4\xe4\xd6\x34\x2b\xf4\xbc\x6e\x15\x6e\x3f\x5f\xb7\xfb\x1d\xf6\x5b\xa5\xb9\xad\xd2\x0e\x5a\xa5\xfd\xd3\x2a\xed\x6b\xab\xb4\xba\xd5\x55\xf7\x56\xb4\x2d\x58\x30\xc2\xee\x33\xfc\x75\x02\xcb\x72\x10\x9f\xf3\x90\x75\x76\xd2\x6b\xcb\x6c\x1f\xb7\x55\x91\x6f\x3c\xeb\x52\x49\x93\x98\x22\x31\xe9\x8d\xfa\x6c\x13\x07\x4a\xe6\xd2\xe0\x78\x69\xdd\x11\x83\x60\xc2\xc1\xaf\x7c\x3e\x5e\x05\xae\xb5\xb6\xc2\x8b\x95\xd4\x58\xab\xfb\xf8\xdb\xea\xe1\xcd\x20\x1e\xeb\xf0\x70\x88\x60\xe4\xb1\x8e\xeb\x22\x35\x86\xf2\xd2\xc0\x14\x68\x6a\x82\xb9\x23\xbc\x86\x70\x01\xd2\x75\x53\x11\xa4\xc1\xa2\xa8\xee\x6b\x2c\xa4\xb9\xc3\xac\xc8\xf3\x42\x83\xe6\x19\x61\x96\xd6\x04\xa9\xcb\xc6\xd4\x6f\x93\x79\x6b\x5d\x7a\x48\xd5\x6b\x15\x1c\xf5\x4c\x6d\xbe\x57\xa9\xce\xc8\xd6\xc5\xc2\x76\x7a\x58\xfd\x38\x3d\x6c\x67\xb4\xe3\xfd\x1c\xee\xf8\x13\x1c\x0e\x60\x1d\xe3\x25\x2d\xac\x5f\x64\xeb\x46\xa9\xde\xea\x78\x27\x7f\xa9\xb3\xe5\xb5\xc7\x78\x38\xf4\x58\xb7\x0b\x95\xea\xac\x49\x33\x42\xa9\xca\xac\xfe\xa6\x3c\xc6\x5c\x17\x35\x99\xa6\xdc\xd4\x1e\x1b\x8a\x68\x8c\x58\x04\x67\x67\x5c\x20\x18\x81\x5f\x05\x93\x78\x02\x93\x55\xc9\x6e\x69\x22\x0a\xb1\x9c\x4f\xea\x2c\x29\x55\xaa\x6b\x6f\x53\xb9\x1b\xfd\x87\xaa\x53\x3e\x8a\x04\x47\x10\x4e\xb8\x88\x97\xed\x3c\x1d\x0f\x57\x3d\xbd\x43\x63\xa3\x48\x80\x0f\xfc\x73\x88\xe8\x12\xfc\x8a\xfb\xd3\x98\x63\x2c\x22\x9f\x0f\xa7\x82\x7f\xd0\xe1\x1e\x63\x3f\x02\x00\x00\xff\xff\x00\xb3\x17\x19\x06\x08\x00\x00")

func sql027_create_validate_formula_triggerSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql027_create_validate_formula_triggerSql,
		"sql/027_create_validate_formula_trigger.sql",
	)
}

func sql027_create_validate_formula_triggerSql() (*asset, error) {
	bytes, err := sql027_create_validate_formula_triggerSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/027_create_validate_formula_trigger.sql", size: 2054, mode: os.FileMode(420), modTime: time.Unix(1511910968, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql030_create_billableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x97\xdf\x6f\xdb\x36\x10\xc7\x9f\xa5\xbf\xe2\x90\x87\xca\x1a\x6c\xad\x59\x93\xad\x4d\xd0\x02\xc1\xec\x0d\x06\xba\x24\x48\xdc\xad\xdb\x8b\x40\x8b\x27\x9b\x9d\x44\x12\x24\x65\x35\xfd\xeb\x07\x52\xa2\xf5\x23\x4e\x9c\x01\xc3\xf2\x12\x89\xba\x3b\x1e\xf9\xfd\x1c\x8f\x9e\xdf\xdd\xdc\xc2\x6f\x57\xab\xc5\xdd\xf2\xea\xe3\xf2\xaf\xc5\x1c\x7e\x5f\x2e\xfe\x80\xe5\x2f\xb0\xf8\xbc\xbc\x5f\xdd\xc3\x9a\x15\x05\x59\x17\x78\x19\xfe\x7c\xb7\xb8\x5a\x2d\x0e\x1b\x5f\xdf\xac\xc6\x0e\x70\x75\x0f\x35\x33\xdb\x30\x9c\xcd\x00\xbf\x1a\x45\x32\x03\x95\xc6\xbc\x2a\x40\x9b\x2a\xcf\x21\x57\xa2\x84\x4a\x93\x0d\x02\xee\x90\x1b\x6d\x2d\x6b\x04\xa3\x90\x18\x58\x0b\xb3\x05\x22\xa5\x06\xc2\x29\x68\x54\x3b\x96\xa1\x06\xa2\xbb\x19\x4e\x14\x6a\x51\xa9\x0c\xf5\x09\x68\x01\x5c\xa8\x92\x14\xec\x1b\x82\xd9\x22\xe4\x0c\x0b\xea\x43\x76\x9f\xb4\x21\x06\x35\x18\x01\x5f\x2a\x6d\xe0\x7e\x75\x75\xb7\x5a\xcc\xbf\xbf\x5f\xdd\xdc\xde\x2e\xe6\xb0\xc6\x8c\x54\x1a\xbb\x34\x32\xc1\x35\x66\x95\x61\x3b\xf4\xc6\xd6\xb9\x44\xc2\xe1\xa4\x92\x94\x18\x3c\x09\x9b\xf4\x6d\x6e\x93\x30\x98\x84\x41\xa0\xb1\xc0\xcc\x84\x41\x10\x30\x3a\xb5\xff\x32\x1b\x0c\x69\x4a\xcc\xc5\x85\x61\x25\x6a\x43\x4a\x69\xbe\x59\x97\xee\x93\xb3\x9c\x28\x52\xa7\x25\x6a\xbb\x2f\xb3\x0f\x1f\x22\x22\x65\xba\xa9\x18\x8d\x62\x6b\x6c\x9f\x9e\x34\xe3\xa4\xc4\xc6\xcc\x3e\x1d\x34\x13\x6a\xd3\x8b\xe6\xdf\x0e\x9a\x6a\x49\x32\xec\x19\x77\xef\xce\x3c\xca\xcf\xe8\xd9\xfa\xdd\x39\x99\xe5\xe7\xe7\x38\x3b\x3b\x7f\xf7\x66\xf6\x96\x9e\x9f\xcd\xde\xbc\xf9\xf1\x2c\xfb\xe1\xfc\xa7\x77\x6f\xb3\xb3\xe8\xe2\xc2\xe0\x57\x63\xdd\x65\x41\x78\xe3\x0d\xb3\x19\xe4\xe4\x6f\x74\x43\xc0\x28\xe4\x42\x41\x26\x4a\x59\x99\x66\x4c\xbb\xf8\x14\x73\x52\x15\x66\xd6\x7e\x19\x87\x72\x4b\x84\x83\x7f\x83\xf8\xd6\xee\xf0\x0c\x99\x20\x05\xea\x0c\xc7\x0b\x67\x5c\x1b\xc2\x33\x4c\x33\x51\x71\x13\x4d\x21\x7a\x1d\xc5\x17\x17\xbc\x2a\x51\xb1\xcc\x26\x60\x2d\x9a\xaf\xd3\xe7\x02\x95\x58\x0a\xf5\x90\x32\x9e\x96\xeb\x54\xa2\x4a\x7d\xe4\x43\x31\xfb\xc6\x2e\xea\x58\x0e\x0b\x6e\xe4\x84\xb0\x4f\x61\x10\xd8\xfa\xb1\x86\x56\x7a\x57\x46\x69\x5b\x46\x41\x50\x6f\x51\xe1\xd3\x41\xde\x43\xd4\xb2\x1c\x59\x23\xa1\xe0\x19\x3b\x57\x18\x51\x18\xc4\x50\x71\x26\x38\x90\xa2\x80\xff\x98\xf1\xb6\xba\xf7\xfb\xf3\x12\xe0\x1f\xf9\xfc\xaf\xf4\x3f\x95\xcd\x9e\xf2\xc6\xab\x83\xfe\xa8\x53\x97\x7e\x87\xb7\xab\x83\xd3\xe8\x39\xf6\xa2\xd7\xd1\xf3\x18\x65\x44\x3b\x12\x2c\x13\x1c\x1e\xa5\xe0\x84\x8e\xad\xd2\xcd\xf9\x3e\x8f\xec\xe9\xc9\x87\x80\x1c\xf5\x9d\x2f\x3e\x2e\x06\xbe\x1e\x9a\x17\xf8\x7e\xba\x9d\x3f\x35\x2f\x72\x7a\x08\x78\xbf\x6f\x2f\x85\x7e\x4c\x8a\x79\x90\x0d\xdc\x25\xe1\x64\x83\x34\x1d\x5b\x58\xda\xc3\x78\xea\x5a\x57\x26\xca\x35\xe3\xe8\xba\x50\x26\xf8\x0e\x95\xb1\x0d\x40\x89\x5a\xbb\x63\x05\x49\xb6\xf5\x9d\x61\xe6\x3b\x84\x50\xbd\xa1\xa6\xb3\x48\xc2\x94\x6b\x88\x40\x2b\x45\x8c\xad\x24\x45\xf8\x06\xed\x1c\x2c\x07\x02\xfb\x66\x06\x54\xa0\x06\x2e\x0c\x6c\xc9\x0e\x81\x80\x0f\xe1\x56\x0a\x0f\x68\xa6\xcd\x5e\xd9\x36\xe7\xbd\x22\x3d\x8a\x0b\x35\x2b\x0a\x70\x3b\x68\x9c\xa5\x2d\x49\xf7\xb0\x63\x58\x03\xd3\xa0\x30\x57\xa8\xb7\x48\x9b\xfe\x95\x3a\x37\xdf\xc5\xf6\xd5\xdd\xb0\xeb\x19\xee\xd7\xcc\xb0\x24\x3c\xb0\x03\xe4\x07\x28\x0f\xc9\x1d\x83\x6a\xb4\xf9\xe6\x32\x98\xf4\x0e\x0b\x28\x90\xd0\xc1\xc0\xe9\x14\xb8\xa8\x27\x71\x0c\x62\x87\x6a\xbf\xfc\xb4\xe9\xeb\xae\x7e\xfc\x3e\xb8\x1c\x1b\x74\x5a\x72\x3c\x2a\x35\xe3\x54\xd4\x61\x10\x8c\xdc\xdd\xda\x25\x51\x86\xb9\x7d\x5c\x3f\xb8\xe3\x07\x84\xa2\xa8\xec\x1b\xa3\x8d\xee\x6b\x34\x35\x22\x87\xac\x52\xca\x4a\xa2\x44\xed\xf8\x38\x85\x5c\x14\x85\xa8\x19\xdf\xc4\x61\xe0\xdd\xfc\xf6\x01\xa3\x1e\xaa\x0d\x72\x54\xc4\x60\x0f\xa3\x1d\xaa\x07\x38\xf1\x04\x9e\x80\xc8\x81\x70\x7b\x01\xb2\xf6\x66\xeb\xf4\xd2\x55\x61\xec\x09\x60\x69\x11\x35\x48\x54\x33\xef\x10\x76\xf8\x8c\x04\x34\xc9\x77\x4e\xc1\x76\x4a\x0b\x3b\x43\x3d\x39\x9d\x82\x49\x3a\x49\xe2\xe1\x26\x79\x18\x8c\xcb\x78\x47\x0a\x46\x53\xa9\x58\xc6\xf8\xc6\x1d\x57\x8f\x66\x91\xb2\x99\xa6\x93\xb1\x71\xb2\x41\x5b\x19\xfb\x03\xa7\x53\x88\x18\xcf\x19\x67\xe6\x21\x6a\xb5\x74\x71\x9d\x82\xad\xa5\x50\xfb\xa4\x86\x73\x4b\xd9\xd3\xb0\x4b\x67\xa0\xdc\x9e\xc3\x4e\xbe\x2e\x81\x7f\x21\x63\xec\x04\xfb\x22\x58\x53\x6f\x6d\x22\xed\x2d\xe2\x80\x34\x37\xd7\x1f\xff\x1c\x54\xa6\x06\xb3\xb5\x17\x49\xc2\x61\x8d\xee\xf2\x8a\xcd\x95\x67\x8d\x36\x50\xc1\xb4\x41\x1a\xfa\x8d\x54\x89\xab\x1c\x95\xb4\x25\xa4\x92\xb6\x7c\x54\xd2\xab\x3d\x95\x0c\x8a\x4f\x25\xa3\x6a\xea\x54\xb0\xca\xbb\xf2\xd1\x66\x52\x88\x1a\xd5\x44\xca\x64\xbf\xbf\xf1\xb4\x19\x53\x89\x2f\x9a\x38\xb6\x2a\x16\x48\xb4\x99\x54\x52\x3e\xb2\x6f\xc6\xfa\xf6\xf6\x66\x30\xac\x3a\x29\x13\xe6\x0e\xee\xbe\x6a\xa9\xcb\x54\x4a\xb7\x9e\x47\x1f\xdb\x45\x4a\x99\xe4\x42\x95\x55\x41\xa6\x61\x80\x3b\x52\xa4\xed\xeb\x64\xb4\x44\xe8\x32\x98\x42\xe7\x15\xfb\xc0\x18\x36\xe0\x74\x22\xa8\x90\x71\x8e\xca\x29\x19\x06\x87\x88\x96\x12\xec\xe1\x99\x74\xe4\xbc\xb7\xa1\xbb\x57\xcb\x46\x7f\x37\xe0\xd5\xab\x5e\x1e\x61\xdb\x7f\x54\xe2\x0e\x93\xc1\x25\xab\x3b\x0a\xac\xbe\xe1\x65\xe8\x7f\x4d\x2d\xaf\xe7\x8b\xcf\xa3\x5f\x50\x8c\x7e\x4d\x19\x85\x9b\xeb\xee\x97\xce\x84\xd1\xf8\xf2\x98\x8f\x50\x9b\xa1\x93\x07\xe6\xb8\xab\xa3\x69\xe8\xdc\x01\x76\xdc\xbd\xbf\x8f\xc3\x28\x23\x02\x8e\x87\xda\x37\xb1\x7e\x98\x4f\xf7\xcb\xeb\x5f\x61\xc3\xb4\x81\xc9\x1e\xbc\xcb\xf0\x9f\x00\x00\x00\xff\xff\xc2\xb3\xb5\x4a\xbd\x0e\x00\x00")

func sql030_create_billableSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql030_create_billableSql,
		"sql/030_create_billable.sql",
	)
}

func sql030_create_billableSql() (*asset, error) {
	bytes, err := sql030_create_billableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/030_create_billable.sql", size: 3773, mode: os.FileMode(420), modTime: time.Unix(1512414663, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql040_create_billable_range_functionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x4f\x6f\xa3\x30\x10\xc5\xcf\xf6\xa7\x98\x43\xd5\x84\x15\x54\xc9\x4a\xab\x95\x36\x27\x9a\xba\x51\xa4\x88\x54\x84\x48\x7b\x43\x26\x4c\xa8\x25\x63\xa8\x31\x49\xbb\x9f\x7e\x65\xfe\x84\x84\xed\x5e\x7a\x62\xde\x33\x9e\xe7\xdf\x18\x3c\x0f\x34\x56\x68\xe8\x53\xb8\x7d\x81\xe7\x7d\xb0\x8c\xd6\xdb\x00\xd6\xcf\xc0\x7e\xaf\x77\xd1\x0e\x12\x21\x25\x4f\x24\xc6\x9a\xab\x0c\xa7\xa6\x32\x7f\x9a\xca\x59\x50\xea\x79\xa3\x65\x78\xab\x51\x0b\xac\xc0\xbc\xe2\x65\x09\x4e\x02\xcf\x70\x2c\x34\x70\xc8\xc4\x09\x15\x34\xef\x52\xcf\xb3\x0d\xf0\x9d\xe7\xa5\xc4\x5f\x9d\x04\x80\x0a\x25\x1e\x0c\x7c\x83\xa3\x2e\xf2\xff\xe6\x4f\x27\xdf\x67\xf3\x9f\xde\x6c\xee\xcd\xe6\x13\x17\x06\xf5\x63\xe2\x38\x0b\xdb\x6d\x19\x32\x3f\x62\xb0\x0d\x21\x64\x2f\x1b\x7f\xc9\x06\xbc\x51\xd3\x36\x11\xd3\x0e\x62\x60\x84\x90\x45\xfb\x30\xd8\x41\xe4\x3f\x6e\xd8\x94\x12\x91\x82\x50\xc6\xa5\x24\xab\x45\x0a\x06\xdf\x6d\xad\x78\x8e\x7d\x5d\xe8\x2c\xbe\x5e\xab\x4a\x7e\xc0\x1b\x27\xc7\xbc\xd0\x1f\xb1\x50\x71\x9e\x80\xaa\x73\xd4\xe2\xe0\x52\x92\xd6\x9a\x1b\x51\xa8\x21\xdd\xa5\xa4\xd4\xe2\x20\x54\x16\x97\x92\xab\xf8\x92\x7d\xe3\x5e\x87\x1f\x0b\x9d\xd7\x92\xf7\xd2\xbe\x87\x7d\x04\x75\xc0\xdf\xc1\xdd\x1d\x3c\xb2\xd5\x3a\xa0\x44\xa3\xa9\xb5\x6a\x2e\xec\xa3\x1b\x39\x25\x24\x79\x10\xa9\xdb\x3c\xed\x91\xdb\xca\x26\xb4\x55\x0f\xd7\xaa\x01\xad\xd5\xd7\x60\xd6\x19\xae\x8a\x12\x42\x32\x8d\xdc\x60\x65\xa6\xb2\x38\xa3\x1e\x8d\xdc\x71\xa1\xb5\x93\x87\x7e\x0e\x8e\x63\x7b\x10\x89\xbc\x32\xd3\xba\x2c\x3f\xdb\xd3\xda\xd7\x7b\x28\x21\x0e\xf0\x0a\x7a\xa7\x3d\xd9\x68\x8c\x9f\x98\x03\x63\x37\x43\x2b\xf0\xc4\x65\xdc\xe9\x86\xe1\x5f\xc6\x11\xe4\x57\x29\xbf\x80\x49\xda\x9d\x97\x03\xf7\xe4\xcd\xa5\x53\x62\xff\x1d\xcb\xd3\xff\x83\x09\x25\xe7\x57\xd4\xd8\x30\x5e\xbe\xb5\xfb\x7b\xb8\x4d\x5b\x50\x16\x3c\x2d\xec\x67\xb2\xf1\x83\xd5\xde\x5f\x31\x28\x65\x99\x55\x6f\x72\x41\xff\x06\x00\x00\xff\xff\x0f\xae\xdd\x5f\x2b\x04\x00\x00")

func sql040_create_billable_range_functionSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql040_create_billable_range_functionSql,
		"sql/040_create_billable_range_function.sql",
	)
}

func sql040_create_billable_range_functionSql() (*asset, error) {
	bytes, err := sql040_create_billable_range_functionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/040_create_billable_range_function.sql", size: 1067, mode: os.FileMode(420), modTime: time.Unix(1511910968, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/001_create_to_seconds_function.sql":      sql001_create_to_seconds_functionSql,
	"sql/002_create_iso8601_function.sql":         sql002_create_iso8601_functionSql,
	"sql/010_create_app_usage_events.sql":         sql010_create_app_usage_eventsSql,
	"sql/020_create_service_usage_events.sql":     sql020_create_service_usage_eventsSql,
	"sql/025_create_pricing_plans.sql":            sql025_create_pricing_plansSql,
	"sql/026_create_pricing_functions.sql":        sql026_create_pricing_functionsSql,
	"sql/027_create_validate_formula_trigger.sql": sql027_create_validate_formula_triggerSql,
	"sql/030_create_billable.sql":                 sql030_create_billableSql,
	"sql/040_create_billable_range_function.sql":  sql040_create_billable_range_functionSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"001_create_to_seconds_function.sql":      &bintree{sql001_create_to_seconds_functionSql, map[string]*bintree{}},
		"002_create_iso8601_function.sql":         &bintree{sql002_create_iso8601_functionSql, map[string]*bintree{}},
		"010_create_app_usage_events.sql":         &bintree{sql010_create_app_usage_eventsSql, map[string]*bintree{}},
		"020_create_service_usage_events.sql":     &bintree{sql020_create_service_usage_eventsSql, map[string]*bintree{}},
		"025_create_pricing_plans.sql":            &bintree{sql025_create_pricing_plansSql, map[string]*bintree{}},
		"026_create_pricing_functions.sql":        &bintree{sql026_create_pricing_functionsSql, map[string]*bintree{}},
		"027_create_validate_formula_trigger.sql": &bintree{sql027_create_validate_formula_triggerSql, map[string]*bintree{}},
		"030_create_billable.sql":                 &bintree{sql030_create_billableSql, map[string]*bintree{}},
		"040_create_billable_range_function.sql":  &bintree{sql040_create_billable_range_functionSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
